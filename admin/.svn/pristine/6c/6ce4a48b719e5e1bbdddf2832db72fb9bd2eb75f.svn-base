package com.module.weixin.service;


import com.helei.api.common.ImplBase;

import com.util.RedisUtil;
import com.util.WeixinUtil;
import net.bytebuddy.implementation.bytecode.Throw;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"serial", "unchecked", "rawtypes"})
@Service("wxApiService")
public class ApiService extends ImplBase {

    @Autowired
    private DbService dbService;

    @Resource
    private WeixinUtil weixinUtil;

    @Resource
    private RedisUtil redisUtil;

    /**
     * 获取基础支持的 Access_token
     *
     * @return Access_token
     */
    public Map getAccess_token() {
        try {
            Map return_map = new HashMap();
            Object redis_access_token = redisUtil.get("access_token");
            Object redis_expires_in = redisUtil.get("expires_in");
            Object redis_access_token_time = redisUtil.get("access_token_time");
            //如果 redis 内有数据首先判断redis是否有效
            if (isnull(redis_access_token)) {
                String[] keys = new String[]{"appID", "appsecret", "access_token", "expires_in", "access_token_time"};
                List res = dbService.getConfig(keys);
                Map<String, Object> map = weixinUtil.ConfigRowtocolumn(res);
                for (String key : keys) {
                    if (!map.containsKey(key)) {
                        throw new Exception(key + " 配置项未查询到,请确定config表内是否有该配置项");
                    }
                }
                Object access_token_time = map.get("access_token_time");
                Object expires_in = map.get("expires_in");
                Object access_token = map.get("access_token");
                Object appID = map.get("appID");
                Object appsecret = map.get("appsecret");
                Boolean is_Effective = weixinUtil.access_token_Is_it_effective(access_token_time, expires_in);
                if (isnull(appID) || isnull(appsecret)) {
                    throw new Exception("appID或appsecret配置项为空,请确定config表内是否有该配置项");
                }
                if (isnull(access_token_time) || isnull(expires_in) || isnull(access_token)) {//如值为空从新获取写入数据库
                    //模拟数据
                    Map res_map = weixinUtil.access_token(appID.toString(), appsecret.toString());
                    Map sqlres = dbService.updateAccess_token(res_map);
                    redisUtil.set("access_token", sqlres.get("access_token"));
                    redisUtil.set("expires_in", sqlres.get("expires_in"));
                    redisUtil.set("access_token_time", sqlres.get("access_token_time"));
                    return_map.put("access_token", sqlres.get("access_token"));
                    return return_map;
                    //走刷新access_token逻辑
                } else if (is_Effective) {
                    //如果有效 写入redis 并返回
                    redisUtil.set("access_token", access_token);
                    redisUtil.set("expires_in", expires_in);
                    redisUtil.set("access_token_time", access_token_time);
                    return_map.put("access_token", access_token);
                } else {
                    //如果无效 重新获取 并写入redis 并返回
                    Map res_map = weixinUtil.access_token(appID.toString(), appsecret.toString());
                    Map sqlres = dbService.updateAccess_token(res_map);
                    redisUtil.set("access_token", sqlres.get("access_token"));
                    redisUtil.set("expires_in", sqlres.get("expires_in"));
                    redisUtil.set("access_token_time", sqlres.get("access_token_time"));
                    return_map.put("access_token", sqlres.get("access_token"));
                    return return_map;
                    //走刷新access_token逻辑
                }
                return return_map;
            } else {
                return_map.put("access_token", redis_access_token);
                Boolean is_Effective = weixinUtil.access_token_Is_it_effective(redis_access_token_time, redis_expires_in);
                if (is_Effective) {
                    //有效直接返回
                    return return_map;
                } else {
                    //无效删除redis数据 并执行递归操作
                    redisUtil.del("access_token");//删除 redis 保存的数据
                    return getAccess_token();//从新进入获取的方法
                }
            }
        } catch (Exception e) {
            getLogger().warn(e);
            dbService.setLog(e, null, null);
            return dbService.getReturn_status("20000");
        }
    }

    public Map getUserInfo(Map map, HttpServletResponse response) {
        try {
            String code = map.get("code").toString();
            String state = map.get("state").toString();
            String[] keys = new String[]{"appID", "appsecret",};
            List res = dbService.getConfig(keys);
            Map<String, Object> resmap = weixinUtil.ConfigRowtocolumn(res);
            Map url_map = weixinUtil.CodeExchangeForAccess_token(resmap.get("appID"), resmap.get("appsecret"), code);
            if (isnull(url_map.get("errcode"))) {
                String access_token = url_map.get("access_token").toString();
                String openid = url_map.get("openid").toString();
                Map info_map = weixinUtil.GetUserinformation(access_token, openid);
                if (!isnull(info_map.get("errcode"))) {
                    if (info_map.get("errcode").equals("48001")) {
                        weixinUtil.Reauthorization(resmap.get("appID"), "snsapi_userinfo");
                    }else {
                        getLogger().error("获取用户信息失败:"+info_map.get("errcode"));
                    }
                } else {
                    System.out.print(info_map);
                }
                return info_map;
            } else {
                String errcode = url_map.get("errcode").toString();
                System.out.print(errcode);
                if (errcode.equals("40029") || errcode.equals("40163")) {
                    weixinUtil.Reauthorization(resmap.get("appID"), "snsapi_userinfo");
                }
                return url_map;
            }
        } catch (Exception e) {
            getLogger().warn(e);
            dbService.setLog(e, null, null);
            return dbService.getReturn_status("20000");
        }
    }

}
