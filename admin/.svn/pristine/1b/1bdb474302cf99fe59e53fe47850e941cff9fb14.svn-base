package com.module.system.login.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.entity.UserEntity;
import com.module.system.login.service.ApiService;
import com.util.ControllerBase;
import com.helei.api.util.PwdUtil;
import com.helei.api.util.ReqToMapUtil;
import com.util.RedisUtil;
import com.util.WeixinUtil;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.ExcessiveAttemptsException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


@SuppressWarnings({"unchecked", "rawtypes", "serial"})
@RestController
public class CommonRestController extends ControllerBase {

	@Autowired
	private ApiService ApiService;
	/*
	 * 响应登录方法
	 */	
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public Map<String, Object> login(HttpServletRequest req, HttpServletResponse resp, Model model) {
		return new HashMap() {
			{
				String un = req.getParameter("username");
				String pwd = PwdUtil.encodePwd(req.getParameter("password"));
				UsernamePasswordToken token = new UsernamePasswordToken(un, pwd);
				Subject subject = SecurityUtils.getSubject();
				try {
					subject.login(token);
					getLogger().info("对用户：[" + un + "]进行登录验证,验证通过!");
				} catch (UnknownAccountException e) {
					subject.logout();
					getLogger().info("对用户：[" + un + "]进行登录验证,验证未通过!错误：未知账号");
					put("retcode", 0);
					put("status", "Erro");
					put("responseText", "用户名或密码错误,请重新登录");
				} catch (IncorrectCredentialsException e) {
					subject.logout();
					getLogger().info("对用户：[" + un + "]进行登录验证,验证未通过!错误：密码错误");
					put("retcode", 0);
					put("status", "Erro");
					put("responseText", "用户名或密码错误,请重新登录");
				} catch (LockedAccountException e) {
					subject.logout();
					getLogger().info("对用户：[" + un + "]进行登录验证,验证未通过!错误：账号被锁定");
					put("retcode", 0);
					put("status", "Erro");
					put("responseText", "该账户账号已锁定");
				} catch (ExcessiveAttemptsException e) {
					subject.logout();
					getLogger().info("对用户：[" + un + "]进行登录验证,验证未通过!错误：错误次数过多");
					put("retcode", 0);
					put("status", "Erro");
					put("responseText", "该账户账号已锁定");
				} catch (AuthenticationException e) {
					subject.logout();
					getLogger().info("对用户：[" + un + "]进行登录验证,验证未通过!错误：用户名或密码不正确");
					put("retcode", 0);
					put("status", "Erro");
					put("responseText", "用户名或密码错误,请重新登录");
				} catch (Exception e){
					subject.logout();
					getLogger().info("对用户：[" + un + "]进行登录验证,验证未通过!错误：" + e.getMessage());
					put("retcode", 0);
					put("status", "Erro");
					put("responseText", "用户名或密码错误,请重新登录");
				}
				if (subject.isAuthenticated()) {
					put("retcode", 1);
					put("status", "ok");
					put("responseText", "登录成功<br /><br />欢迎回来");
					Map user = (Map)subject.getPrincipal();
					Object a=subject.getSession();
					req.getSession().setAttribute("user", user);
				}
			}
		};
	}
	
	@RequestMapping(value = { "/menutree" })
	public Map<String, Object> menutree(HttpServletRequest req, Model model) throws Exception {
		Map user = (Map)(req.getSession().getAttribute("user"));
		return ApiService.queryMenuTree(user);
	}
	// 新增
	/**
	 * 退出登录
	 */
	@RequestMapping(value = "/logout")
	public Map logout() {
		return new HashMap() {
			{
				try {
					Subject subject = SecurityUtils.getSubject();
					subject.logout();
					put("code", "0");
					put("msg", "Success");
				}catch(Exception e) {
					put("code", "-1");
					put("msg", e.getMessage());
				}
			}
		};
	}

	/**
	 * 用户注册
	 * @param req
	 * @param model
	 * @return Map
	 */
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public Map Register(HttpServletRequest req, Model model){
		Map map=ReqToMapUtil.getParameterMap(req);
		map.put("password",PwdUtil.encodePwd(map.get("password").toString()));
		return ApiService.register(map);
	}

	/**
	 * 用户注册
	 * @param req
	 * @param model
	 * @return Map
	 */
	@RequestMapping(value = "/test")
	public String test(HttpServletRequest req, Model model){
		Map map=ReqToMapUtil.getParameterMap(req);
		return ApiService.getIpAddr(req);
	}
}
