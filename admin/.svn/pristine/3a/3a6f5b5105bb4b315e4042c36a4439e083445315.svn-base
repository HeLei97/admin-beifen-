package com.module;

import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Base64.Decoder;
import java.util.Base64.Encoder;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;

public class DESUtil {

    private static String CHARSETNAME = "UTF-8";
    private static String ALGORITHM = "DES";

    /**
     *
     * @param keyStr 随机秘钥
     * @return
     */
    private Key getKey(String keyStr) {
        Key key = null;
        try {
            // 生成DES算法对象
            KeyGenerator generator = KeyGenerator.getInstance(ALGORITHM);
            // 运用SHA1安全策略
            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
            // 设置密钥
            secureRandom.setSeed(keyStr.getBytes());
            // 初始化基于SHA1的算法对象
            generator.init(secureRandom);
            // 生成密钥对象
            key = generator.generateKey();
            generator = null;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return key;
    }

    /***
     * 获取加密的信息
     *
     * @param str 密码明文
     * @return 密码密文 & 秘钥
     */
    public String getEncryptString(String keyStr,String str) {
        Map<String, String> map = new HashMap<>(2);
        // 基于BASE64编码，接收byte[]并转换成String
        Encoder encoder = Base64.getEncoder();
        try {
            // 按utf8编码
            byte[] bytes = str.getBytes(CHARSETNAME);
            // 获取加密对象
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            //秘钥可以自行确定，可以每个password生成一个随机秘钥，比如UUID.randomUUID().toString(),然后保存到数据库中
            // 初始化密码信息
            cipher.init(Cipher.ENCRYPT_MODE, getKey(keyStr));
            // 加密
            byte[] doFinal = cipher.doFinal(bytes);
            // byte[]to encode好的String 并返回
            String password = encoder.encodeToString(doFinal);
            return password;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /***
     * 获取解密之后的信息
     * @param keyStr 秘钥
     * @param str 密码密文
     * @return
     */
    public String getDecryptString(String keyStr, String str) {
        Decoder decoder = Base64.getDecoder();
        try {
            // 将字符串decode成byte[]
            byte[] bytes = decoder.decode(str);
            // 获取解密对象
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            // 初始化解密信息
            cipher.init(Cipher.DECRYPT_MODE, getKey(keyStr));
            // 解密
            byte[] doFial = cipher.doFinal(bytes);

            return new String(doFial, CHARSETNAME);

        } catch (Exception e) {
            throw new RuntimeException("解密失败", e);
        }
    }
}

