package com.module.weixin.controller;


import com.entity.UserEntity;
import com.helei.api.util.ReqToMapUtil;
import com.module.weixin.service.ApiService;
import com.util.ControllerBase;
import com.util.RedisUtil;
import com.util.ReleaseStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@SuppressWarnings({"unchecked", "rawtypes", "serial"})
@RequestMapping(value = "/wx")
@RestController
public class WXRestController extends ControllerBase {
    @Autowired
    private ApiService apiService;

    private static int ExpireTime = 60;   // redis中存储的过期时间60s

    @Resource
    private RedisUtil redisUtil;

    @RequestMapping("set")
    public boolean redisset(String key, String value) {
        return redisUtil.set(key, value,20);
    }

    @RequestMapping("get")
    public Object redisget(String key) {
        return redisUtil.get(key);
    }

    @RequestMapping("update")
    public Object update(String key, String value) {
        return redisUtil.update(key, value);
    }

    @RequestMapping("expire")
    public boolean expire(String key) {
        return redisUtil.expire(key, ExpireTime);
    }

    @RequestMapping("getAccess_token")
    public void getAccess_token() {
        Object Access_token = redisUtil.get("Access_token");
        if (Access_token == null) {
            System.out.println(apiService.getAccess_token());
        }
    }

    /**
     * 获取微信用户信息
     *
     * @param req
     * @param response
     * @param model
     * @return
     */
    @RequestMapping("getUserInfo")
    public void getUserInfo(HttpServletRequest req, HttpServletResponse response, Model model) throws IOException {

        Map map = ReqToMapUtil.getParameterMap(req);
        Map res=apiService.getUserInfo(map, response);
        String uuid=map.get("state").toString();
        if (res.get("code").equals("10000")){
            Map data=(Map) res.get("data");
            redisUtil.update(uuid, ReleaseStatus.SCANNED);
            if (data.get("code").equals("SUCCESS")){
                response.sendRedirect("/wx/confirmlogin?uuid="+uuid+"&userstate=1");
            }else {
                response.sendRedirect("/wx/confirmlogin?uuid="+uuid+"&userstate=0");
            }
        }else {
            response.sendRedirect("/404");
        }
    }

    /**
     * 重定向到微信授权页面
     *
     * @param req
     * @param model
     */
    @RequestMapping("getCode")
    public void getCode(HttpServletRequest req, Model model) {
        Map map = ReqToMapUtil.getParameterMap(req);
        apiService.getCode(map);
    }

    @RequestMapping("getQrcode")
    public Map getQrcode() {
        //需要设置一下二维码超时
        return apiService.createQr();
    }

    @RequestMapping("query")
    public Map queryIsScannedOrVerified(HttpServletRequest req, Model model) {
        Map map = ReqToMapUtil.getParameterMap(req);
        String uuid = map.get("uuid").toString();
        Object QrCodeStatus = redisUtil.get(uuid);
        if (isnull(QrCodeStatus)){
            return new HashMap() {{
                put("QrCodeStatus", ReleaseStatus.Expired);
            }};
        }else {
            return new HashMap() {{
                put("uuid", uuid);
                put("QrCodeStatus", QrCodeStatus);
            }};
        }
    }

    @RequestMapping("doScan")
    public Map doAppScanQrCode(HttpServletRequest req, Model model) {
        Map map = ReqToMapUtil.getParameterMap(req);
        String uuid = map.get("uuid").toString();
        String QrCodeStatus = redisUtil.get(uuid).toString();
        if (isnull(QrCodeStatus))
            return null;
        //需要规范一下状态
        switch (QrCodeStatus) {
            case ReleaseStatus.NOT_SCAN:
                redisUtil.update(uuid, ReleaseStatus.SCANNED);
                    return new HashMap(){{
                        put("code","SCANNED");
                        put("msg","请手机确认");
                    }};
            case ReleaseStatus.SCANNED:
                return new HashMap(){{
                    put("code","SCANNED");
                    put("msg","已扫描");
                }};
            case ReleaseStatus.VERIFIED:
                return new HashMap(){{
                    put("code","VERIFIED");
                    put("msg","已确认");
                }};
            case ReleaseStatus.EXIT:
                return new HashMap(){{
                    put("code","EXIT");
                    put("msg","取消授权");
                }};
        }
        return new HashMap(){{
            put("msg","失败");
        }};
    }
    @RequestMapping("queren")
    public Map queren(HttpServletRequest req, Model model) {
        Map map = ReqToMapUtil.getParameterMap(req);
        String uuid = map.get("uuid").toString();
        String QrCodeStatus = redisUtil.get(uuid).toString();
        if (QrCodeStatus.equals("SCANNED")) {
            //未做登录的判断 以及取消
            redisUtil.set(uuid, "VERIFIED");
            return new HashMap() {{
                put("code", "VERIFIED");
                put("msg", "已确认");
            }};
        }else {
            //redisUtil.set(uuid, "EXIT");
            return new HashMap() {{
                put("msg", "扫码状态错误");
            }};
        }
    }

}
